#+TITLE: Doom Emacs Config
#+PROPERTY: header-args :tangle config.el
#+AUTHOR: Ualnomis

* Config Doom Emacs
Whenever you reconfigure a package, make sure to wrap your config in an `after!' block, otherwise Doom's defaults may override your settings. E.g.
#+begin_src emacs-lisp :tangle no
(after! PACKAGE
    (setq x y))
#+end_src

The exceptions to this rule:
  - Setting file/directory variables (like `org-directory')
  - Setting variables which explicitly tell you to set them before their
    package is loaded (see 'C-h v VARIABLE' to look up their documentation).
  - Setting doom variables (which start with 'doom-' or '+').

Here are some additional functions/macros that will help you configure Doom.
- `load!' for loading external *.el files relative to this one
- `use-package!' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  `require' or `use-package'.
- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over the highlighted symbol at press 'K' (non-evil users must press 'C-c c k'). This will open documentation for it, including demos of how they are used. Alternatively, use `C-h o' to look up a symbol (functions, variables, faces, etc).

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how they are implemented.

* Lexical Binding in Emacs Lisp
In Emacs Lisp, lexical binding offers an alternative to the default dynamic binding, allowing variables to be bound in the scope where they are defined, rather than dynamically. This scoping model can lead to more predictable code and can improve performance. Since Emacs version 24, lexical binding has been available and can be enabled on a per-file basis.

To enable lexical binding in an Emacs Lisp file, a special declaration must be included in the file's header. This is particularly relevant for users of Doom Emacs, who may wish to enable lexical binding in their configuration files to take advantage of the benefits it offers.

Consider the following example, which demonstrates how to enable lexical binding in a =config.el= file located in the Doom Emacs directory (=DOOMDIR=):

#+BEGIN_SRC emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+END_SRC

** Explanation

- The initial =;;;= marks the beginning of a comment in Emacs Lisp. Using three semicolons is a conventional way to denote file headers or major sections of a file.
- =$DOOMDIR/config.el= specifies the intended file for this setting, aiding documentation. In practice, the path is not functional within this line but serves as a clear identifier for human readers.
- The =-*- lexical-binding: t; -*-= portion is the critical part of this line. It's a special syntax that Emacs looks for in the first line of a file (or the second, if the first line is a shebang) to set file-local variables.
  - =lexical-binding: t;= specifically enables lexical scope for the file, with =t= signifying true.

Enabling lexical binding allows developers to write Emacs Lisp code that is more in line with the scoping rules of modern programming languages, potentially making the code more intuitive and performant.

* Identity
Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets. It is optional.
#+begin_src emacs-lisp :tangle no
(setq user-full-name "John Doe"
      user-mail-address "john@doe.com")
#+end_src

* Doom theme
There are two ways to load a theme. Both assume the theme is installed and available. You can either set `doom-theme' or manually load a theme with the `load-theme' function. This is the default:
#+begin_src emacs-lisp
(setq doom-theme 'doom-dark+)
#+end_src

* Org Mode
If you use `org' and don't want your org files in the default location below, change `org-directory'. It must be set before org loads!
#+begin_src emacs-lisp
(setq org-directory "/mnt/c/Users/simon/Dropbox/org/")
(setq org-gtd-directory "/mnt/c/Users/simon/Dropbox/org/gtd/")
#+end_src

** Ord Edna
#+begin_src emacs-lisp
(use-package! org-edna
  :custom
  (org-edna-use-inheritance t)
  (org-edna-mode))
#+end_src
** Org ql
#+begin_src emacs-lisp
(use-package! org-ql)
#+end_src

** Org Super Agenda
#+begin_src emacs-lisp
(after! org-agenda
  (org-super-agenda-mode))
(setq org-agenda-custom-commands
      '(("n" "Agenda and all TODOs"
         ((agenda "")
          (alltodo "")))
        ("g" "GTD agenda"
         ((agenda "")
          (alltodo "" ((org-agenda-overriding-header "")
                       (org-super-agenda-header-map nil)
                       (org-super-agenda-groups
                        '(;; Each group has an implicit boolean OR operator between its selectors. Thus the sequence of selector is matter.
                          (:name "INBOX"
                           :todo "INBOX")
                          (:discard (:habit t))
                          (:discard (:todo "NEXT"))
                          (:auto-parent t)
                          (:discard (:anything t))
                          ))))))))

#+end_src

** Org Capture
#+begin_src emacs-lisp
(after! org-capture
  (setq org-capture-templates
        `(
          ;; for gtd
          ("i" "INBOX" entry (file (lambda() (expand-file-name "inbox.org" org-gtd-directory)))
           "* INBOX %?\n:PROPERTIES:\n:DATE_ADDED: %U\n:END:")
          )))
#+end_src

** Org GTD
#+begin_src emacs-lisp
(setq org-agenda-files (list org-gtd-directory))

(after! org
  (setq org-todo-keywords
        `((sequence "TODO(t)" "INBOX(i)" "PROJ(p)" "NEXT(n)" "WAIT(w)" "HOLD(h)" "IDEA(i)" "|" "DONE(d)" "KILL(k)" "Trash(t)")
          (sequence "[ ](T)" "[-](S)" "[?](W)" "|" "[X](D)")
          (sequence "|" "OKAY(o)" "YES(y)" "NO(n)"))))

(setq org-refile-targets '((nil :maxlevel . 3)
                          (org-agenda-files :maxlevel . 1)))
#+end_src
** Org Pomodoro
Install `alsa-utils` before installing `org-pomodoro`.
#+begin_src sh :tangle no
sudo nala instapp alsa-utils
#+end_src

#+begin_src emacs-lisp
(use-package! org-pomodoro)
#+end_src

* xterm-color
#+begin_src emacs-lisp
(use-package! xterm-color)

(after! eshell
  (add-hook 'eshell-before-prompt-hook
            (lambda ()
              (setq xterm-color-preserve-properties t)))
  (add-to-list 'eshell-preoutput-filter-functions 'xterm-color-filter)
  (setq eshell-output-filter-functions (remove 'eshell-handle-ansi-color eshell-output-filter-functions))
  (setenv "TERM" "xterm-256color"))
#+end_src

* Font
Doom exposes five (optional) variables for controlling fonts in Doom:
- `doom-font' -- the primary font to use
- `doom-variable-pitch-font' -- a non-monospace font (where applicable)
- `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.
- `doom-symbol-font' -- for symbols
- `doom-serif-font' -- for the `fixed-pitch-serif' face

See 'C-h v doom-font' for documentation and more examples of what they accept. For example:
#+begin_src emacs-lisp :tangle no
(setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
     doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))
#+end_src

If you or Emacs can't find your font, use 'M-x describe-font' to look them up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to refresh your font settings. If Emacs still can't find your font, it likely wasn't installed correctly. Font issues are rarely Doom issues!

* Line
This determines the style of line numbers in effect. If set to `nil', line numbers are disabled. For relative line numbers, set this to `relative'.
#+begin_src emacs-lisp
(setq display-line-numbers-type t)
#+end_src

* JavaScript
** Node.js
#+begin_src emacs-lisp
(after! js-comint
  (defun js-comint-mode-hook-setup ()
    (add-hook 'comint-output-filter-functions #'xterm-color-filter -90 t)
    (setq-local ansi-color-for-comint-mode 'filter))
  (add-hook 'js-comint-mode-hook 'js-comint-mode-hook-setup t))
#+end_src
** Biome
#+begin_src emacs-lisp
(after! apheleia
  (use-package! lsp-biome))
#+end_src

* Eshell
Fix `Wrong type argument: sequencep, 771`
#+begin_src emacs-lisp
(after! eshell-did-you-mean
  (defun eshell-did-you-mean--get-all-commands ()
    "Feed `eshell-did-you-mean--all-commands'."
    (unless eshell-did-you-mean--all-commands
      (setq eshell-did-you-mean--all-commands (all-completions "" (pcomplete-completions))))))
#+end_src

* Input method
** Chinese
*** Cangjie input method
#+begin_src emacs-lisp
(use-package! rime
  :init (setq default-input-method "rime"))
#+end_src

Create the config in .emacs.d/.local/cache/rime/default.custom.yaml
#+begin_src yaml :tangle ~/.emacs.d/.local/cache/rime/default.custom.yaml
patch:
  schema_list:
    - schema: cangjie5
  menu/page_size: 9
  switcher:
    hotkeys:
      - Control+grave
#+end_src

Finall `M-x rime-deploy`

* Tab Width
#+begin_src emacs-lisp
(setq-default tab-width 2)
(setq js-indent-level 2)
(setq css-indent-offset 2)
#+end_src

* Company
** Ispell
Company-Ispell: lookup-words error: No plain word-list found at systemdefault locations. Customize ‘ispell-alternate-dictionary’ to set yours.
- Solution
  - Debian
      #+begin_src sh :tangle no
      sudo apt install wamerican
      #+end_src

